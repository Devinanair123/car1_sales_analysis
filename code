# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.stats.outliers_influence import variance_inflation_factor

# Step 1: Read the cars dataset given
cars_df = pd.read_csv('car data.csv')  # Adjust the filename as per your dataset

# Step 2: performing EDA
# Data Quality Check
print(cars_df.info())
print(cars_df.describe())

# Treat Missing Values if any
cars_df.dropna(inplace=True)

# Step 3: Transform Categorical Data
cars_df = pd.get_dummies(cars_df, columns=['Fuel_Type', 'Seller_Type', 'Transmission'])

# Step 4: Apply Multiple Linear Regression Model
X = cars_df.drop(['Car_Name', 'Selling_Price'], axis=1)
y = cars_df['Selling_Price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Print the Model Results
print(f'Intercept: {model.intercept_}')
print('Coefficients:')
for feature, coefficient in zip(X.columns, model.coef_):
    print(f'{feature}: {coefficient}')

# Step 6: Get Feature Importance
# Step 7: Visualize the Diagnostic Plots
# Residual plot
y_pred = model.predict(X_test)
residuals = y_test - y_pred

plt.figure(figsize=(10, 6))

plt.subplot(1, 2, 1)
plt.scatter(y_pred, residuals)
plt.title('Residual Plot')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')

# Distribution of residuals
plt.subplot(1, 2, 2)
sns.histplot(residuals, kde=True)
plt.title('Distribution of Residuals')
plt.xlabel('Residuals')

plt.show()
